// Firebase Authentication with Gmail
import { getAuth, signInWithPopup, GoogleAuthProvider } from "firebase/auth";

const auth = getAuth();
const provider = new GoogleAuthProvider();

signInWithPopup(auth, provider)
  .then((result) => {
    const user = result.user;
    console.log(user);
  })
  .catch((error) => {
    console.error(error);
  });

// Server-side (Node.js)
const io = require("socket.io")(server);

io.on("connection", (socket) => {
  console.log("User connected:", socket.id);

  socket.on("sendMessage", (message) => {
    io.emit("receiveMessage", message);
  });

  socket.on("disconnect", () => {
    console.log("User disconnected:", socket.id);
  });
});
// Firebase Authentication with Gmail
import { getAuth, signInWithPopup, GoogleAuthProvider } from "firebase/auth";

const auth = getAuth();
const provider = new GoogleAuthProvider();

signInWithPopup(auth, provider)
  .then((result) => {
    const user = result.user;
    console.log(user);
  })
  .catch((error) => {
    console.error(error);
  });

// Server-side (Node.js)
const io = require("socket.io")(server);

io.on("connection", (socket) => {
  console.log("User connected:", socket.id);

  socket.on("sendMessage", (message) => {
    io.emit("receiveMessage", message);
  });

  socket.on("disconnect", () => {
    console.log("User disconnected:", socket.id);
  });
});

import { io } from "socket.io-client";

const socket = io("http://localhost:3000");

socket.on("receiveMessage", (message) => {
  console.log("New message:", message);
});

socket.emit("sendMessage", "Hello, world!");


{
  "userId": "123",
  "email": "user@gmail.com",
  "name": "John Doe",
  "profilePic": "url_to_image"
}


{
  "messageId": "456",
  "senderId": "123",
  "receiverId": "789",
  "message": "Hello!",
  "timestamp": "2023-10-01T12:00:00Z"
}


function ChatApp() {
  const [messages, setMessages] = useState([]);
  const [input, setInput] = useState("");

  const sendMessage = () => {
    socket.emit("sendMessage", input);
    setInput("");
  };

  return (
    <div>
      <div className="chat-window">
        {messages.map((msg, index) => (
          <div key={index}>{msg}</div>
        ))}
      </div>
      <input value={input} onChange={(e) => setInput(e.target.value)} />
      <button onClick={sendMessage}>Send</button>
    </div>
  );
}

const fetchContacts = async (accessToken) => {
  const response = await fetch("https://people.googleapis.com/v1/people/me/connections", {
    headers: {
      Authorization: `Bearer ${accessToken}`,
    },
  });
  const data = await response.json();
  return data.connections;
};


// server.js
const express = require("express");
const http = require("http");
const { Server } = require("socket.io");
const mongoose = require("mongoose");
const cors = require("cors");
require("dotenv").config();

const app = express();
const server = http.createServer(app);
const io = new Server(server, {
  cors: {
    origin: "http://localhost:3000", // Allow frontend to connect
    methods: ["GET", "POST"],
  },
});

// Middleware
app.use(cors());
app.use(express.json());

// MongoDB Connection
mongoose.connect(process.env.MONGO_URI, {
  useNewUrlParser: true,
  useUnifiedTopology: true,
})
.then(() => console.log("Connected to MongoDB"))
.catch((err) => console.error("MongoDB connection error:", err));

// Socket.io Connection
io.on("connection", (socket) => {
  console.log("User connected:", socket.id);

  socket.on("sendMessage", (message) => {
    io.emit("receiveMessage", message); // Broadcast message to all users
  });

  socket.on("disconnect", () => {
    console.log("User disconnected:", socket.id);
  });
});

// Start Server
const PORT = process.env.PORT || 5000;
server.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});
MONGO_URI=mongodb+srv://<username>:<password>@cluster0.mongodb.net/<dbname>?retryWrites=true&w=majority
PORT=5000


// src/App.js
import React, { useState, useEffect } from "react";
import io from "socket.io-client";
import axios from "axios";

const socket = io("http://localhost:5000");

function App() {
  const [messages, setMessages] = useState([]);
  const [input, setInput] = useState("");

  useEffect(() => {
    socket.on("receiveMessage", (message) => {
      setMessages((prevMessages) => [...prevMessages, message]);
    });
  }, []);

  const sendMessage = () => {
    socket.emit("sendMessage", input);
    setInput("");
  };

  return (
    <div>
      <div className="chat-window">
        {messages.map((msg, index) => (
          <div key={index}>{msg}</div>
        ))}
      </div>
      <input
        value={input}
        onChange={(e) => setInput(e.target.value)}
        placeholder="Type a message..."
      />
      <button onClick={sendMessage}>Send</button>
    </div>
  );
}

export default App;
const { OAuth2Client } = require("google-auth-library");
const client = new OAuth2Client(process.env.GOOGLE_CLIENT_ID);

app.post("/api/auth/google", async (req, res) => {
  const { token } = req.body;
  const ticket = await client.verifyIdToken({
    idToken: token,
    audience: process.env.GOOGLE_CLIENT_ID,
  });
  const payload = ticket.getPayload();
  const user = {
    email: payload.email,
    name: payload.name,
    picture: payload.picture,
  };
  // Save user to MongoDB or return user data
  res.status(200).json(user);
});

<!-- Add this to public/index.html -->
<script src="https://accounts.google.com/gsi/client" async defer></script>



// src/GoogleLogin.js
function GoogleLogin() {
  const handleGoogleLogin = (response) => {
    axios.post("/api/auth/google", { token: response.credential })
      .then((res) => {
        console.log("User logged in:", res.data);
      })
      .catch((err) => {
        console.error("Login error:", err);
      });
  };

  return (
    <div>
      <div
        id="g_id_onload"
        data-client_id="YOUR_GOOGLE_CLIENT_ID"
        data-callback="handleGoogleLogin"
      ></div>
      <div
        className="g_id_signin"
        data-type="standard"
        data-size="large"
        data-theme="outline"
        data-text="sign_in_with"
        data-shape="rectangular"
        data-logo_alignment="left"
      ></div>
    </div>
  );
}





// models/User.js
const mongoose = require("mongoose");

const userSchema = new mongoose.Schema({
  email: { type: String, required: true, unique: true },
  name: { type: String, required: true },
  profilePic: { type: String },
});

module.exports = mongoose.model("User", userSchema);

// models/Message.js
const messageSchema = new mongoose.Schema({
  senderId: { type: mongoose.Schema.Types.ObjectId, ref: "User" },
  receiverId: { type: mongoose.Schema.Types.ObjectId, ref: "User" },
  message: { type: String, required: true },
  timestamp: { type: Date, default: Date.now },
});

module.exports = mongoose.model("Message", messageSchema);





// Generate key pair for a user
const nacl = require("tweetnacl");

const keyPair = nacl.box.keyPair();
const publicKey = Buffer.from(keyPair.publicKey).toString("base64");
const privateKey = Buffer.from(keyPair.secretKey).toString("base64");

console.log("Public Key:", publicKey);
console.log("Private Key:", privateKey);







// Encrypt a message
function encryptMessage(message, recipientPublicKey, senderPrivateKey) {
  const nonce = nacl.randomBytes(nacl.box.nonceLength);
  const encrypted = nacl.box(
    Buffer.from(message),
    nonce,
    Buffer.from(recipientPublicKey, "base64"),
    Buffer.from(senderPrivateKey, "base64")
  );
  return {
    encrypted: Buffer.from(encrypted).toString("base64"),
    nonce: Buffer.from(nonce).toString("base64"),
  };
}

// Decrypt a message
function decryptMessage(encryptedMessage, nonce, senderPublicKey, recipientPrivateKey) {
  const decrypted = nacl.box.open(
    Buffer.from(encryptedMessage, "base64"),
    Buffer.from(nonce, "base64"),
    Buffer.from(senderPublicKey, "base64"),
    Buffer.from(recipientPrivateKey, "base64")
  );
  return Buffer.from(decrypted).toString("utf8");
}



// Signaling server (Node.js + Socket.io)
io.on("connection", (socket) => {
  socket.on("offer", (offer, targetUserId) => {
    io.to(targetUserId).emit("offer", offer, socket.id);
  });

  socket.on("answer", (answer, targetUserId) => {
    io.to(targetUserId).emit("answer", answer);
  });

  socket.on("ice-candidate", (candidate, targetUserId) => {
    io.to(targetUserId).emit("ice-candidate", candidate);
  });
});





// WebRTC setup in React.js
const pc = new RTCPeerConnection();

// Handle incoming offers
socket.on("offer", async (offer, senderId) => {
  await pc.setRemoteDescription(new RTCSessionDescription(offer));
  const answer = await pc.createAnswer();
  await pc.setLocalDescription(answer);
  socket.emit("answer", answer, senderId);
});

// Handle incoming answers
socket.on("answer", async (answer) => {
  await pc.setRemoteDescription(new RTCSessionDescription(answer));
});

// Handle ICE candidates
socket.on("ice-candidate", async (candidate) => {
  await pc.addIceCandidate(new RTCIceCandidate(candidate));
});

// Start a call
const startCall = async (targetUserId) => {
  const offer = await pc.createOffer();
  await pc.setLocalDescription(offer);
  socket.emit("offer", offer, targetUserId);
};

// Add local stream (video/audio)
navigator.mediaDevices.getUserMedia({ video: true, audio: true })
  .then((stream) => {
    const localVideo = document.getElementById("local-video");
    localVideo.srcObject = stream;
    stream.getTracks().forEach((track) => pc.addTrack(track, stream));
  });

// Handle remote stream
pc.ontrack = (event) => {
  const remoteVideo = document.getElementById("remote-video");
  remoteVideo.srcObject = event.streams[0];
};


const messageSchema = new mongoose.Schema({
  senderId: { type: mongoose.Schema.Types.ObjectId, ref: "User" },
  receiverId: { type: mongoose.Schema.Types.ObjectId, ref: "User" },
  message: { type: String, required: true },
  status: { type: String, enum: ["sent", "delivered", "read"], default: "sent" },
  timestamp: { type: Date, default: Date.now },
});




// Update message status to "delivered"
socket.on("messageDelivered", (messageId) => {
  Message.findByIdAndUpdate(messageId, { status: "delivered" }, (err) => {
    if (err) console.error("Error updating status:", err);
  });
});

// Update message status to "read"
socket.on("markAsRead", (messageIds) => {
  Message.updateMany(
    { _id: { $in: messageIds } },
    { status: "read" },
    (err) => {
      if (err) console.error("Error updating status:", err);
    }
  );
});

function Message({ message }) {
  return (
    <div>
      <p>{message.text}</p>
      <small>{message.status}</small>
    </div>
  );
}


































